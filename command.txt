

cabal haddock --hyperlink-source --html-location='http://hackage.haskell.org/package/huckleberry/docs' --contents-location='http://hackage.haskell.org/package/huckleberry'

cp -R ./dist/doc/html/huckleberry/ huckleberry-0.9.0.0-docs
tar -cvzf huckleberry-0.9.0.0-docs.tar.gz huckleberry-0.9.0.0-docs --format=ustar
curl -X PUT -H 'Content-Type: application/x-tar' -H 'Content-Encoding: gzip' --data-binary '@huckleberry-0.9.0.0-docs.tar.gz' 'https://$USERNAME:$PASSWORD@hackage.haskell.org/package/huckleberry-0.9.0.0/docs'


[[spec]]

INT_MIN = -32768
INT_MAX = 32767	

変数 A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,X,Y,Z
配列 [0] .. [101]


* IF の入れ子は出来ないっぽい
* IF の分岐先で複数コマンドは可能

* FOR は入れ子に出来る
* FOR の中で複数のコマンド


[[special]]
	行番号 コマンド
	行番号
	
	REM


[[初級]]

(:) :: Expr () -> Expr () -> Expr ()
[:] 式の結合

ifThenElse :: Expr Int -> Expr () -> Expr () -> Expr ()
[IF 数 THEN 次 ELSE 次2] 条件分岐

forStepNext :: Expr Int -> Expr Int -> Expr Int -> Expr Int -> Expr () -> Expr ()
[FOR 変数=数1 TO 数2 STEP 数3: 式: NEXT] 繰り返し

let :: Expr Int -> Expr [Int] -> Expr ()
[LET 変数,数] 変数の設定

print :: Show r => Expr r -> Expr ()
[PRINT 数や文字列] 数や文字列を表示 (;) で結合できる

(;) :: Show r => Expr r -> Expr r -> Expr r
文字列になるものを結合(PRINTの引数で使える,数と文字列の混在)


led :: Expr Int -> Expr ()
[LED 数] LEDの制御

wait :: Expr Int -> Expr ()
[WAIT 数] ディレイを入れる

run :: Expr ()
[RUN] プログラムの実行

list :: Expr Int -> Expr Int -> Expr ()
[LIST 行番号1,行番号2] プログラムの表示

goto :: Expr Int -> Expr ()
[GOTO 行番号] 行番号にジャンプ

end :: Expr ()
[END] プログラムを終了

btn :: Expr Int -> Expr Int
[BTN(数)] ボタンの状態

new :: Expr ()
[NEW] プログラムを全消去

locate :: Expr Int -> Expr Int -> Expr ()
[LOCATE 数,数] PRINT位置の指定

cls :: Expr ()
[CLS] 画面消去

rnd :: Expr Int -> Expr Int
[RND(数)] 乱数

save :: Expr Int -> Expr ()
[SAVE 数] プログラムの保存

load :: Expr Int -> Expr ()
[LOAD 数] プログラムの読み出し

files :: Expr Int -> Expr ()
[FILES 数] 動作確認できず...

beep :: Expr Int -> Expr Int -> Expr ()
[BEEP 数,数] ブザーを鳴らす

play :: String -> Expr ()
[PLAY MML] MMLの再生(文字列が結合できなかった)

tempo :: Expr Int -> Expr ()
[TEMPO 数] テンポの設定


(+) :: Expr Int -> Expr Int -> Expr Int
[数 + 数] 加算

(-) :: Expr Int -> Expr Int -> Expr Int
[数 - 数] 減算

(*) :: Expr Int -> Expr Int -> Expr Int
[数 * 数] 乗算

(/) :: Expr Int -> Expr Int -> Expr Int
[数 / 数] 除算

(%) :: Expr Int -> Expr Int -> Expr Int
[数 % 数] 余算

(()) :: Expr Int -> Expr Int -> Expr Int
[(数)] 数式の優先順位 ※どうしていいか分からん -> なんとかなった


input :: String -> Expr Int -> Expr ()
[INPUT (文字列,)変数] キーボードから数値を入力(文字列が結合できなかった)

tick :: Expr Int
[TICK()] 時間を返す

clt :: Expr ()
[CLT] 時間をリセットする

inkey :: Expr Int
[INKEY()] キーボードから1文字入力

char :: Expr Int -> Expr String
[CHR$(数)] 文字コード => 文字(列)

asc :: String -> Expr Int
[ASC("文字")] 文字(列) => 文字コード (先頭文字対象,文字列が結合できなかった)

scroll :: Expr Int -> Expr ()
[SCROLL 数] 画面をスクロール

scr :: Expr Int -> Expr Int -> Expr Int
[SCR(数,数)] 画面の文字の文字コードを取得


(=) :: Expr Int -> Expr Int -> Expr Int
[数 = 数]

(<>) :: Expr Int -> Expr Int -> Expr Int
[数 <> 数]

(<=) :: Expr Int -> Expr Int -> Expr Int
[数 <= 数]

(<) :: Expr Int -> Expr Int -> Expr Int
[数 < 数]

(>=) :: Expr Int -> Expr Int -> Expr Int
[数 >= 数]

(>) :: Expr Int -> Expr Int -> Expr Int
[数 > 数]

(&&) :: Expr Int -> Expr Int -> Expr Int
[式 AND 式]

(||) :: Expr Int -> Expr Int -> Expr Int
[式 OR 式]

(/=) :: Expr Int -> Expr Int
[NOT 式]




[[上級]]

clv :: Expr ()
[CLV] 変数を配列のクリア

clk :: Expr ()
[CLK] キーの状態のクリア

abs :: Expr Int -> Expr Int
[ABS(数)] 絶対値

gosub :: Expr Int -> Expr ()
[GOSUB 行番号] RETURN でもどれる GOTO

return :: Expr ()
[RETURN] GOSUB の次の行に戻る

sound :: Expr Int
[SOUND()] 音が鳴っているか

free :: Expr Int
[FREE()] 残りメモリ量

ver :: Expr Int
[VER()] バージョン番号

renum :: Expr Int -> Expr ()
[RENUM 数] プログラムの番号振り直し

lrun :: Expr Int -> Expr ()
[LRUN 数] LOAD + RUN

file :: Expr Int
[FILE()] 最後にプログラムを読み込み、書き込み行った数を返す

sleep :: Expr ()
[SLEEP] ボタンが押されるまで停止

video :: Expr Int -> Expr ()
[VIDEO 数] 画面表示の停止

peek :: Expr Int -> Expr Int
[PEEK(数)] メモリ読み出し

poke :: Expr Int -> Expr Int -> Expr ()
[POKE 数,数] メモリ書き込み

clp :: Expr ()
[CLP] キャラクターパターンの初期化

help :: Expr ()
[HELP] メモリマップの表示

ana :: Expr Int -> Expr Int
[ANA(数)] アナログポートの電圧

out :: Expr Int -> Expr Int -> Expr ()
[OUT 数1,数2] OUTポートの制御

in :: Expr Int -> Expr Int
[IN(数)] INポートの状態取得


[#16進数]
※これはリテラル専用っぽい

hex :: Expr Int -> Expr Int -> Expr String
[HEX$(数,数)] 16進数表現の取得

[`2進数]
※これはリテラル専用っぽい

bin :: Expr Int -> Expr Int -> Expr String
[BIN$(数,数)] 2進数表現の取得

(&) :: Expr Int -> Expr Int -> Expr Int
[数 & 数]

(|) :: Expr Int -> Expr Int -> Expr Int
[数 | 数]

(^) :: Expr Int -> Expr Int -> Expr Int
[数 ^ 数]

(>>) :: Expr Int -> Expr Int -> Expr Int
[数 >> 数]

(<<) :: Expr Int -> Expr Int -> Expr Int
[数 << 数]

(~) :: Expr Int -> Expr Int
[~数]

bps :: Expr Int -> Expr ()
[BPS 数] シリアル通信速度の設定

i2cr :: Expr Int -> Expr Int -> Expr Int -> Expr Int -> Expr Int -> Expr Int
[I2CR(数1,数2,数3,数4,数5)] I2C読み込み

i2cw :: Expr Int -> Expr Int -> Expr Int -> Expr Int -> Expr Int -> Expr Int
[I2CW(数1,数2,数3,数4,数5)] I2C書き込み
	
usr :: Expr Int -> Expr Int -> Expr Int
[USR(数,数)] マシン語呼び出し


